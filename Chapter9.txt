#PBS -N TrjconvAll
#PBS -j oe
#PBS -m e
#PBS -M youremail@R1UNI.edu
#PBS -l walltime=24:00:00
#PBS -l nodes=1:ppn=12
#PBS -S /bin/bash
set -vx
module load gromacs
>cd /fs/lustre/cwr0408/
>for l in EtOHMix50 EtOHMix00 EtOHMix70 EtOHMix100 EtOHMix80
>do
>cd /fs/lustre/cwr0408/$l
>for dir in */
>do
>cd /fs/lustre/cwr0408/$l/$dir
>echo 0 | trjconv -f md_concat.trr -s $l\_$dir\_EM.gro -o md_out.gro
>echo $dir | ./AnalyzeGro4
>done
>done


#PBS -N TrjCatConv+f+Dens
#PBS -j oe
#PBS -m e
#PBS -M youremail@R1UNI.edu
#PBS -l walltime=12:00:00
#PBS -l nodes=1:ppn=12
#PBS -S /bin/bash
>set -vx
>module load GROMACS/4.6.3
>cd /fs/lustre/cwr0408/
>for l in EtOHMix50 EtOHMix00 EtOHMix70 EtOHMix100 EtOHMix80
>do
>cd /fs/lustre/cwr0408/$l
?for dir in */
>do
>cd /fs/lustre/cwr0408/$l/$dir
>echo -e "0\n1000\n9000\n" | trjcat -settime -f firstmd.trr secondmd.trr thirdmd.trr -o md_concat.trr
>echo 0 | trjconv -f md_concat.trr -s $l\_${dir%?}\_EM.gro -o md_out.gro
>echo $dir | ./AnalyzeGro4
>echo -e "1" | g_density -f md_concat.trr -s md1.tpr -o $l\_${dir%?}\_density_${i%?}\.xvg -dens mass -d Z
>echo -e "6" | g_density -f md_concat.trr -s md1.tpr -o $l\_${dir%?}\_density_EtOH.xvg -dens mass -d Z
>echo -e "5" | g_density -f md_concat.trr -s md1.tpr -o $l\_${dir%?}\_density_HOH.xvg -dens mass -d Z
>echo -e "0" | g_density -f md_concat.trr -s md1.tpr -o $l\_${dir%?}\_density_Sys.xvg -dens mass -d Z
>done
>done


#PBS -N TrjconvAll
#PBS -j oe
#PBS -m e
#PBS -M youremail@R1UNI.edu
#PBS -l walltime=24:00:00
#PBS -l nodes=1:ppn=12
#PBS -S /bin/bash
>set -vx
>module load GROMACS
>cd /fs/lustre/cwr0408/
>for l in EtOHMix50 EtOHMix00 EtOHMix70 EtOHMix100 EtOHMix80
>do
>cd /fs/lustre/cwr0408/$l
>for dir in */
>do
>cd /fs/lustre/cwr0408/$l/$dir
>echo 0 | trjconv -f md_concat.trr -s $l\_$dir\_EM.gro -o md_out.gro
>echo $dir | ./AnalyzeGro4
>done
>done


#PBS -N PE_10C_MS8ns
#PBS -j oe
#PBS -m abe
#PBS -M youremail@R1Uni.edu
#PBS -l walltime=24:00:00
#PBS -l nodes=1:ppn=12
#PBS -S /bin/bash
>set -vx
>module load GROMACS/4.6.3
>for l in EtOHMix00 EtOHMix50 EtOHMix70 EtOHMix80 EtOHMix100
>do
>for i in PE4 PE5 PE6 PE8 PE10 PE12 PE14 PE18 PE24 PP6 PP9 PP12 PP15 PP18 PIB12 PIB24 PIB36
>do
>cd /fs/lustre/cwr0408/$l/$i
>echo -e "6\n1" | g_rdf -f md_concat.trr -s md1.tpr -o $l\_$i\_rdf_HOH.xvg -com
>echo -e "6\n5" | g_rdf -f md_concat.trr -s md1.tpr -o $l\_$i\_rdf_$C\OH.xvg -com
>done
>done
>for l in EtOHMix00  EtOHMix50 EtOHMix70 EtOHMix80 EtOHMix100
>do
>module load GROMACS/4.6.3
>for i in PE4 PE5 PE6 PE8 PE10 PE12 PE14 PE18 PE24 PP6 PP9 PP12 PP15 PP18 PIB12 PIB24 PIB36
>do
>cd /fs/lustre/cwr0408/1.29.2014/$i
>echo -e "1" | g_density -f md_concat.trr -s md1.tpr -o $l\_$i\_density_$i\.xvg -dens mass -symm -d Z
>echo -e "6" | g_density -f md_concat.trr -s md1.tpr -o $l\_$i\_density_$C\OH.xvg -dens mass -symm -d Z
>echo -e "5" | g_density -f md_concat.trr -s md1.tpr -o $l\_$i\_density_HOH.xvg -dens mass -symm -d Z
>echo -e "0" | g_density -f md_concat.trr -s md1.tpr -o $l\_$i\_density_Sys.xvg -dens mass -symm -d Z
>done
>done
#This section of the code outputs many ensemble parameters.
>for l in EtOHMix00 EtOHMix50 EtOHMix70 EtOHMix80 EtOHMix100
>do
>for i in PE4 PE5 PE6 PE8 PE10 PE12 PE14 PE18 PE24 PP6 PP9 PP12 PP15 PP18 PIB12 PIB24 PIB36
>do
>cd /fs/lustre/cwr0408/$l/$i
>echo 2 3 4 5 6 7 8 12 33 34 35 36 23 27 31\n | g_energy -f firstmd.edr -s md1.tpr -o $l\_$i\_energy1.xvg
>echo 2 3 4 5 6 7 8 12 33 34 35 36 23 27 31\n | g_energy -f secondmd.edr -s md2.tpr -o $l\_$i\_energy2.xvg
>echo 2 3 4 5 6 7 8 12 33 34 35 36 23 27 31\n | g_energy -f thirdmd.edr -s md3.tpr -o $l\_$i\_energy3.xvg
>done
>done


>echo -e "0\n1000\n9000\n" | trjcat -settime -f firstmd.trr secondmd.trr thirdmd.trr -o md_concat.trr
>echo 0 | trjconv -f md_concat.trr -s $X\OHMix$C_$i_EM.gro -o md_out.gro
>echo $i | ./AnalyzeGro4
#Making the ndx file for Water ordering (only includes wa-ters)
>echo -e "name Water\nq" | make_ndx -f md_out.gro -o in-dex.ndx
#Making the GRO file for the calculation of the order param-eter
>echo 1 | trjconv -f md_concat.trr -s $X\_PP18_EM.gro -o md_out_order.gro
#May need to create a special GRO file with only water mole-cules (ndx required)
>echo 1 | g_order -f md_out_order.gro -s md1.tpr -o or-der.xvg
#Multiple RDF and density calls should be performed (density for each species and system [4] and mixture; rdf for each solvent [2])
#Computing the RDF of the polymer with water, then alcohol (no ndx needed)
>echo -e "6\n1" | g_rdf -f md_concat.trr -s md1.tpr -o $l\_$i\_rdf_HOH.xvg -com
>echo -e "6\n5" | g_rdf -f md_concat.trr -s md1.tpr -o $l\_$i\_rdf_$X\OH.xvg -com
>echo -e "1" | g_density -f md_concat.trr -s md1.tpr -o $l\_$i\_density_$i.xvg -dens mass -d Z
>echo -e "6" | g_density -f md_concat.trr -s md1.tpr -o $l\_$i\_density_$C\OH.xvg -dens mass -d Z
>echo -e "5" | g_density -f md_concat.trr -s md1.tpr -o $l\_$i\_density_HOH.xvg -dens mass -d Z
>echo -e "0" | g_density -f md_concat.trr -s md1.tpr -o $l\_$i\_density_Sys.xvg -dens mass -d Z
It is required to plot and derive kD, the diffusion con-stant, from the mean squared displacement (MSD) separately, although it is given as a runtime output in the log.  No ndx file required for MSD computations.  These computations are only applied to the polymer or target molecule.
>echo 6 | g_msd -f md_concat.trr -s md1.tpr -o $l\_$i\_msd.xvg
>echo 6 | g_gyrate -f md_concat.trr -s md1.tpr -o $l\_$i\_gyrate.xvg
#Since the .EDR files are not concatenable, this is per-formed in three steps
#for plotting together in Excel or a similar program
>echo 2 3 4 5 6 7 8 12 33 34 35 36 23 27 31\n | g_energy -f firstmd.edr -s md1.tpr -o $l\_$i\_energy1.xvg
>echo 2 3 4 5 6 7 8 12 33 34 35 36 23 27 31\n | g_energy -f secondmd.edr -s md2.tpr -o $l\_$i\_energy2.xvg
>echo 2 3 4 5 6 7 8 12 33 34 35 36 23 27 31\n | g_energy -f thirdmd.edr -s md3.tpr -o $l\_$i\_energy3.xvg
Then add a section into the loop to copy each of these out-puts into some outputs folder:
>cp $l\_$i\_rdf_HOH.xvg $l\_$i\_rdf_$COH.xvg $l\_$i\_density_$i.xvg $l\_$i\_density_$COH.xvg /$l\outputs
>cp $l\_$i\_density_HOH.xvg $l\_$i\_density_Sys.xvg msd.xvg $l\_$i\_gyrate.xvg $l\_$i\_energy1.xvg /$l\outputs
>cp $l\_$i\_energy3.xvg $l\_$i\_energy3.xvg /$l/outputs
>cp r_concat.dat /$l/outputs/$l\_$i\_r.dat


>g_hbond -f md_concat.trr s- [].tpr -n index2.ndx -num hbnu-mixvg
where the ndx file is created first such that:
>make_ndx -f md_out.gro -o index.ndx


#PBS -N PE_4C_70MS1ns
#PBS -j oe
#PBS -m abe
#PBS -M gfm12@case.edu
#PBS -l walltime=1:59:00
#PBS -l nodes=1:ppn=12
#PBS -S /bin/bash
>set -vx
>module load GROMACS/4.6.3
>cd $PBS_O_WORKDIR
>echo 1 2\n | g_hbond -f md_concat.trr -s md1.tpr -num hbnum.xvg
>#echo 1 5\n | g_hbond -f md_concat.trr -s md1.tpr -num hbnum2.xvg
>#echo 5 5\n | g_hbond -f md_concat.trr -s md1.tpr -num hbnum3.xvg
>#;echo 1 5\n | g_hbond -f md_out.gro -s md1.tpr -num hbnum.xvg
>echo 1 | g_h20order -f md_out.gro -s md1.tpr -o $X\OHMix$C\_$i\_order.xvg
>#echo 1 | g_order -f md_out_order.gro -s md1.tpr -o or-der.xvg


#PBS -N TRJCAT+f+dens
#PBS -j oe
#PBS -m abe
#PBS -M gfm12@case.edu
#PBS -l walltime=24:00:00
#PBS -l nodes=1:ppn=12
#PBS -S /bin/bash
>set -vx
#change the name of the folders
>module load GROMACS
>cd /fs/lustre/cwr0408/
>mv ./8.8.2013 ./EtOHMix50
>mv ./9.3.2013 ./EtOHMix00
>mv ./9.5.2013 ./EtOHMix70
>mv ./1.3.2014 ./EtOHMix100
>mv ./1.29.2014 ./EtOHMix80
>for l in EtOHMix50 EtOHMix00 EtOHMix70 EtOHMix100 EtOHMix80
>do
>cd /fs/lustre/cwr0408/$l
>for dir in */
>do
>cd /fs/lustre/cwr0408/$l/$dir
>echo $l $dir
>echo -e "0\n1000\n9000\n" | trjcat -settime -f firstmd.trr secondmd.trr thirdmd.trr -o md_concat.trr
#Running a pre-compiled Fortran program
>echo $dir | ./AnalyzeGro4
#Density computations
>echo -e "1" | g_density -f md_concat.trr -s md1.tpr -o $l_$dir_density_$i.xvg -dens mass -d Z
>echo -e "6" | g_density -f md_concat.trr -s md1.tpr -o $l_$dir_density_EtOH.xvg -dens mass -d Z
>echo -e "5" | g_density -f md_concat.trr -s md1.tpr -o $l_$dir_density_HOH.xvg -dens mass -d Z
>echo -e "0" | g_density -f md_concat.trr -s md1.tpr -o $l_$dir_density_Sys.xvg -dens mass -d Z
>done
>done
#change the name of the folders back
>mv ./EtOHMix50 ./8.8.2013
>mv ./EtOHMix00 ./9.3.2013
>mv ./EtOHMix70 ./9.5.2013
>mv ./EtOHMix100 ./1.3.2014
>mv ./EtOHMix80 ./1.29.2014

   program Build
   implicit none
   integer MxN
   parameter(MxN=27000)
   real*8 xyz(3,MxN), dx(3), PL(3), drxy
   real*8 R(MxN)
   real*8 sum_nTop,sum_nBot, sum_nTot,sum_nMax
    integer idum,ires, j, j2, k, Nat, iframe
    integer nTop,nBot,nTot,iNotTop,iNotBot, ihit
    character*3 tn
    character*4 resID(MxN),resTarg

c.. MxN denotes the upper limit on the expected
c.. number of atoms in the system, which can be deter-mined from the
>c.. .gro file

c.. the input file is .gro file type
   open(unit=39, file='md_out.gro', status='unknown')
c.. the output file is r2.dat
   open(unit=49, file='r_concat.dat', status='unknown')

c.. read in 'the code' of the molecule you are analyzing
   write(*,*) 'enter molecule type'
   read(*,*) resTarg
 
   sum_nTop=0.d0
   sum_nBot=0.d0
   sum_nTot=0.d0
   sum_nMax=0.d0

c.. loop through the number of frames in the simulation (simulation-time-dependent var)
   >do iframe =1,25000

c.. write out occasionally so you know where you are
   if (mod(iframe,10).eq.0) write(*,*) iframe

c.. read a junk line, then the number of atoms
   read(39,*) tn
   read(39,*) Nat

c.. tn is the atom type
c.. Nat is the number of atoms
 
c.. loop through all atoms, j is a counting variable
    do j=1,Nat  
 
c.. read atom info: type of atom and position
      read(39,129) ires, resID(j), tn, idum,
     $         xyz(1,j),xyz(2,j),xyz(3,j)
>
c.. ires is
c.. resID is the atom number
c.. tn is

c.. set size of atom based on its type starting
c.. from the 13th column of the .gro file
      R(j)=0.02d0
   if (tn.eq.' OW'.or.tn.eq.' EO'.or.
     $     tn.eq.'  O'.or.tn.eq.
     $        ' O'.or.tn.eq.'O') then
   R(j)=.152
   endif
   if (tn.eq.'EC1'.or.tn.eq.'EC2'.or.
     $        tn.eq.' C1'.or.tn.eq.' C2'.or.
     $         tn.eq.'CH3'.or.tn.eq.'  C'
     $         .or.tn.eq.' C'.or.tn.eq.'C') then
  > R(j)=.170
   endif
   if (tn.eq.'  H'.or.tn.eq.' EH'.or.
     $        tn.eq.'HW1'.or.tn.eq.'HW2'
     $       .or.tn.eq.' H'.or.tn.eq.'H') then
   R(j)=.120
   endif
c.. this checks if an error and size not assigned
   if (R(j).lt.0.03) then
   write(*,*) 'xxxxx',j,tn
   endif

   enddo

c.. read junk line to get ready for next frame
   read(39,130) PL(1),PL(2),PL(3)
 
   nTop=0
   nBot=0
   nTot=0

c.. loop through all atoms; if its part of target mole-cule, proceed with analysis
   do j=1,Nat
   if (resID(j).eq.resTarg) then
   iNotTop=0
   iNotBot=0
   
c.. loop through all atoms; if NOT part of target mole-cule, proceed with analysis
   do j2=1,Nat
   if (resID(j2).ne.resTarg) then
       
c.. find distance in xy plane between atom in target mol-ecule and other atom
c.. apply periodic boundary conditions
   do k=1,2
   dx(k)=(xyz(k,j2)-xyz(k,j))
   if(dabs(dx(k)+PL(k)).lt.dabs(dx(k)))dx(k)=dx(k)+PL(k)
   if(dabs(dx(k)-PL(k)).lt.dabs(dx(k)))dx(k)=dx(k)-PL(k)
   enddo   
   drxy= dsqrt( dx(1)**2 +dx(2)**2 )

c.. find distance in z direction between atom in target molecule and other atom
>c.. NO periodic boundary conditions
   if(xyz(3,j2).gt.0.7*PL(3))xyz(3,j2)=xyz(3,j2)-PL(3)
   dx(3)=(xyz(3,j2)-xyz(3,j))
       
c.. if distance in xy plane is less than sum of atom ra-dii -- then its an overlap
 >  ihit=0
   if (drxy.lt.R(j)+R(j2)) ihit=1
   
c.. for overlaps, find out if atom in target molecule is on top or bottom
 >  if (ihit.eq.1) then
   if (dx(3).gt.0.d0) then
   iNotTop=1
   else
   iNotBot=1
   endif
   if (iNotTop.gt.0.and.iNotBot.gt.0) goto 10
   endif
   endif
   enddo
   if (iNotTop.eq.0) nTop=nTop+1
   if (iNotBot.eq.0) nBot=nBot+1
10   continue
   nTot=nTot+1
   
   endif
   enddo
c.. What do iNotTop and iNotBot represent?

c.. write(49,*) nTop, nBot, nTot
   sum_nTop=sum_nTop +nTop
   sum_nBot=sum_nBot +nBot
   sum_nTot=sum_nTot +nTot
   if (nTop.gt.nBot) then
   sum_nMax=sum_nMax +nTop
   else
   sum_nMax=sum_nMax +nBot
   endif

c.. nMax is 0 initially, but then it is
c.. nTop or nBot, whichever is greater

c.. for each frame, there are five digits written
c.. the first set goes to the screen and the second set goes
c.. to the r.dat file
c..   write(*,*) nTot
   write(*,101) sum_nMax/sum_nTot,
     $        sum_nTop/sum_nTot, sum_nBot/sum_nTot,
     $        dble(nTop)/dble(nTot), dble(nBot)/dble(nTot)
  >write(49,101) sum_nMax/sum_nTot,
     $        sum_nTop/sum_nTot, sum_nBot/sum_nTot,
     $        dble(nTop)/dble(nTot), dble(nBot)/dble(nTot)
  >enddo

c.. the first number reported is nMax over the total num-ber
c.. the second number is nTop over the total number
c.. the third number is nBot over the total number
c.. the fourth number is double precision nTop over total
c.. the fifth number is double precision nBot over total

c.. These lines are telling the rest of the code about the form of the
>c.. inputs and outputs.

101   format(5f12.3)     
129   format(i5,a4,3x,a3,i5,3f8.3)
130   format(3f10.3)

   stop
   end

   
   
